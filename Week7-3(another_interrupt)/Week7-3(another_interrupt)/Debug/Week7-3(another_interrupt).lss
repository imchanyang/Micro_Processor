
Week7-3(another_interrupt).elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001d6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000162  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  00800100  00800100  000001d6  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000001d6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000208  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000040  00000000  00000000  00000244  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000099c  00000000  00000000  00000284  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000852  00000000  00000000  00000c20  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000037d  00000000  00000000  00001472  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000074  00000000  00000000  000017f0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000466  00000000  00000000  00001864  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000180  00000000  00000000  00001cca  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000060  00000000  00000000  00001e4a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	54 c0       	rjmp	.+168    	; 0xae <__vector_1>
   6:	00 00       	nop
   8:	51 c0       	rjmp	.+162    	; 0xac <__bad_interrupt>
   a:	00 00       	nop
   c:	4f c0       	rjmp	.+158    	; 0xac <__bad_interrupt>
   e:	00 00       	nop
  10:	4d c0       	rjmp	.+154    	; 0xac <__bad_interrupt>
  12:	00 00       	nop
  14:	4b c0       	rjmp	.+150    	; 0xac <__bad_interrupt>
  16:	00 00       	nop
  18:	49 c0       	rjmp	.+146    	; 0xac <__bad_interrupt>
  1a:	00 00       	nop
  1c:	47 c0       	rjmp	.+142    	; 0xac <__bad_interrupt>
  1e:	00 00       	nop
  20:	45 c0       	rjmp	.+138    	; 0xac <__bad_interrupt>
  22:	00 00       	nop
  24:	43 c0       	rjmp	.+134    	; 0xac <__bad_interrupt>
  26:	00 00       	nop
  28:	41 c0       	rjmp	.+130    	; 0xac <__bad_interrupt>
  2a:	00 00       	nop
  2c:	3f c0       	rjmp	.+126    	; 0xac <__bad_interrupt>
  2e:	00 00       	nop
  30:	3d c0       	rjmp	.+122    	; 0xac <__bad_interrupt>
  32:	00 00       	nop
  34:	3b c0       	rjmp	.+118    	; 0xac <__bad_interrupt>
  36:	00 00       	nop
  38:	39 c0       	rjmp	.+114    	; 0xac <__bad_interrupt>
  3a:	00 00       	nop
  3c:	37 c0       	rjmp	.+110    	; 0xac <__bad_interrupt>
  3e:	00 00       	nop
  40:	35 c0       	rjmp	.+106    	; 0xac <__bad_interrupt>
  42:	00 00       	nop
  44:	33 c0       	rjmp	.+102    	; 0xac <__bad_interrupt>
  46:	00 00       	nop
  48:	31 c0       	rjmp	.+98     	; 0xac <__bad_interrupt>
  4a:	00 00       	nop
  4c:	2f c0       	rjmp	.+94     	; 0xac <__bad_interrupt>
  4e:	00 00       	nop
  50:	2d c0       	rjmp	.+90     	; 0xac <__bad_interrupt>
  52:	00 00       	nop
  54:	2b c0       	rjmp	.+86     	; 0xac <__bad_interrupt>
  56:	00 00       	nop
  58:	29 c0       	rjmp	.+82     	; 0xac <__bad_interrupt>
  5a:	00 00       	nop
  5c:	27 c0       	rjmp	.+78     	; 0xac <__bad_interrupt>
  5e:	00 00       	nop
  60:	25 c0       	rjmp	.+74     	; 0xac <__bad_interrupt>
  62:	00 00       	nop
  64:	23 c0       	rjmp	.+70     	; 0xac <__bad_interrupt>
  66:	00 00       	nop
  68:	21 c0       	rjmp	.+66     	; 0xac <__bad_interrupt>
  6a:	00 00       	nop
  6c:	1f c0       	rjmp	.+62     	; 0xac <__bad_interrupt>
  6e:	00 00       	nop
  70:	1d c0       	rjmp	.+58     	; 0xac <__bad_interrupt>
  72:	00 00       	nop
  74:	1b c0       	rjmp	.+54     	; 0xac <__bad_interrupt>
  76:	00 00       	nop
  78:	19 c0       	rjmp	.+50     	; 0xac <__bad_interrupt>
  7a:	00 00       	nop
  7c:	17 c0       	rjmp	.+46     	; 0xac <__bad_interrupt>
  7e:	00 00       	nop
  80:	15 c0       	rjmp	.+42     	; 0xac <__bad_interrupt>
  82:	00 00       	nop
  84:	13 c0       	rjmp	.+38     	; 0xac <__bad_interrupt>
  86:	00 00       	nop
  88:	11 c0       	rjmp	.+34     	; 0xac <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_clear_bss>:
  98:	21 e0       	ldi	r18, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	01 c0       	rjmp	.+2      	; 0xa2 <.do_clear_bss_start>

000000a0 <.do_clear_bss_loop>:
  a0:	1d 92       	st	X+, r1

000000a2 <.do_clear_bss_start>:
  a2:	a1 30       	cpi	r26, 0x01	; 1
  a4:	b2 07       	cpc	r27, r18
  a6:	e1 f7       	brne	.-8      	; 0xa0 <.do_clear_bss_loop>
  a8:	4b d0       	rcall	.+150    	; 0x140 <main>
  aa:	59 c0       	rjmp	.+178    	; 0x15e <_exit>

000000ac <__bad_interrupt>:
  ac:	a9 cf       	rjmp	.-174    	; 0x0 <__vectors>

000000ae <__vector_1>:
#include "_main.h" // headerfile about interrupt
#define F_CPU 14745600UL
// when interrupt led switch
char Direction;
SIGNAL(INT0_vect) 
{
  ae:	1f 92       	push	r1
  b0:	0f 92       	push	r0
  b2:	0f b6       	in	r0, 0x3f	; 63
  b4:	0f 92       	push	r0
  b6:	11 24       	eor	r1, r1
  b8:	8f 93       	push	r24
	Direction = ~Direction;
  ba:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
  be:	80 95       	com	r24
  c0:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
} // external interrupt 
  c4:	8f 91       	pop	r24
  c6:	0f 90       	pop	r0
  c8:	0f be       	out	0x3f, r0	; 63
  ca:	0f 90       	pop	r0
  cc:	1f 90       	pop	r1
  ce:	18 95       	reti

000000d0 <PB_Lshift>:

void PB_Lshift(void) {
	char LED;
	LED = 0xfe; // 1111_1110
	for(int i = 0; i < 8; i++) {
  d0:	20 e0       	ldi	r18, 0x00	; 0
  d2:	30 e0       	ldi	r19, 0x00	; 0
	Direction = ~Direction;
} // external interrupt 

void PB_Lshift(void) {
	char LED;
	LED = 0xfe; // 1111_1110
  d4:	8e ef       	ldi	r24, 0xFE	; 254
	for(int i = 0; i < 8; i++) {
  d6:	10 c0       	rjmp	.+32     	; 0xf8 <PB_Lshift+0x28>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  d8:	4f ef       	ldi	r20, 0xFF	; 255
  da:	5f e7       	ldi	r21, 0x7F	; 127
  dc:	96 e1       	ldi	r25, 0x16	; 22
  de:	41 50       	subi	r20, 0x01	; 1
  e0:	50 40       	sbci	r21, 0x00	; 0
  e2:	90 40       	sbci	r25, 0x00	; 0
  e4:	e1 f7       	brne	.-8      	; 0xde <PB_Lshift+0xe>
  e6:	00 c0       	rjmp	.+0      	; 0xe8 <PB_Lshift+0x18>
  e8:	00 00       	nop
		_delay_ms(500);
		PORTB = LED;
  ea:	88 bb       	out	0x18, r24	; 24
		LED = (LED << 1) | 0x01; // 0000_0001
  ec:	90 e0       	ldi	r25, 0x00	; 0
  ee:	88 0f       	add	r24, r24
  f0:	99 1f       	adc	r25, r25
  f2:	81 60       	ori	r24, 0x01	; 1
} // external interrupt 

void PB_Lshift(void) {
	char LED;
	LED = 0xfe; // 1111_1110
	for(int i = 0; i < 8; i++) {
  f4:	2f 5f       	subi	r18, 0xFF	; 255
  f6:	3f 4f       	sbci	r19, 0xFF	; 255
  f8:	28 30       	cpi	r18, 0x08	; 8
  fa:	31 05       	cpc	r19, r1
  fc:	6c f3       	brlt	.-38     	; 0xd8 <PB_Lshift+0x8>
		_delay_ms(500);
		PORTB = LED;
		LED = (LED << 1) | 0x01; // 0000_0001
	}
}
  fe:	08 95       	ret

00000100 <PB_Rshift>:

void PB_Rshift(void) {
	char LED;
	LED = 0x7f; // 0111_1111
	for(int i = 0; i < 8; i++) {
 100:	20 e0       	ldi	r18, 0x00	; 0
 102:	30 e0       	ldi	r19, 0x00	; 0
	}
}

void PB_Rshift(void) {
	char LED;
	LED = 0x7f; // 0111_1111
 104:	8f e7       	ldi	r24, 0x7F	; 127
	for(int i = 0; i < 8; i++) {
 106:	0e c0       	rjmp	.+28     	; 0x124 <PB_Rshift+0x24>
 108:	4f ef       	ldi	r20, 0xFF	; 255
 10a:	5f e7       	ldi	r21, 0x7F	; 127
 10c:	96 e1       	ldi	r25, 0x16	; 22
 10e:	41 50       	subi	r20, 0x01	; 1
 110:	50 40       	sbci	r21, 0x00	; 0
 112:	90 40       	sbci	r25, 0x00	; 0
 114:	e1 f7       	brne	.-8      	; 0x10e <PB_Rshift+0xe>
 116:	00 c0       	rjmp	.+0      	; 0x118 <PB_Rshift+0x18>
 118:	00 00       	nop
		_delay_ms(500);
		PORTB = LED;
 11a:	88 bb       	out	0x18, r24	; 24
		LED = (LED >> 1) | 0x80; // 1000_0000
 11c:	86 95       	lsr	r24
 11e:	80 68       	ori	r24, 0x80	; 128
}

void PB_Rshift(void) {
	char LED;
	LED = 0x7f; // 0111_1111
	for(int i = 0; i < 8; i++) {
 120:	2f 5f       	subi	r18, 0xFF	; 255
 122:	3f 4f       	sbci	r19, 0xFF	; 255
 124:	28 30       	cpi	r18, 0x08	; 8
 126:	31 05       	cpc	r19, r1
 128:	7c f3       	brlt	.-34     	; 0x108 <PB_Rshift+0x8>
		_delay_ms(500);
		PORTB = LED;
		LED = (LED >> 1) | 0x80; // 1000_0000
	}
}
 12a:	08 95       	ret

0000012c <interrupt_init>:

void interrupt_init(void) {
	EICRA = 0x02; //0000_0010 control register : falling edge setting
 12c:	82 e0       	ldi	r24, 0x02	; 2
 12e:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <__TEXT_REGION_LENGTH__+0x7e006a>
	EIMSK = 0x01;//0000_0001 0th interrupt(int0) use setting
 132:	81 e0       	ldi	r24, 0x01	; 1
 134:	89 bf       	out	0x39, r24	; 57
	DDRD = 0x00; // d port : input 
 136:	11 ba       	out	0x11, r1	; 17
	SREG |= 0x80; // 1000_0000 
 138:	8f b7       	in	r24, 0x3f	; 63
 13a:	80 68       	ori	r24, 0x80	; 128
 13c:	8f bf       	out	0x3f, r24	; 63
 13e:	08 95       	ret

00000140 <main>:
}

int main(void)
{
    DDRB = 0xff;
 140:	8f ef       	ldi	r24, 0xFF	; 255
 142:	87 bb       	out	0x17, r24	; 23
	
	PORTB = 0x0f; // 0000_1111
 144:	8f e0       	ldi	r24, 0x0F	; 15
 146:	88 bb       	out	0x18, r24	; 24
	Direction = 0;
 148:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
	
    while (1) 
    {	interrupt_init();
 14c:	ef df       	rcall	.-34     	; 0x12c <interrupt_init>
		if(Direction != 0) {
 14e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 152:	88 23       	and	r24, r24
			PB_Lshift();
 154:	11 f0       	breq	.+4      	; 0x15a <main+0x1a>
 156:	bc df       	rcall	.-136    	; 0xd0 <PB_Lshift>
		}
		else {
			PB_Rshift();
 158:	f9 cf       	rjmp	.-14     	; 0x14c <main+0xc>
 15a:	d2 df       	rcall	.-92     	; 0x100 <PB_Rshift>
 15c:	f7 cf       	rjmp	.-18     	; 0x14c <main+0xc>

0000015e <_exit>:
 15e:	f8 94       	cli

00000160 <__stop_program>:
 160:	ff cf       	rjmp	.-2      	; 0x160 <__stop_program>
