
Week7-2(int).elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000198  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000144  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000198  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001c8  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000038  00000000  00000000  00000204  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000a24  00000000  00000000  0000023c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000082f  00000000  00000000  00000c60  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000395  00000000  00000000  0000148f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000054  00000000  00000000  00001824  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000042c  00000000  00000000  00001878  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000261  00000000  00000000  00001ca4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000058  00000000  00000000  00001f05  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	4b c0       	rjmp	.+150    	; 0x9c <__bad_interrupt>
   6:	00 00       	nop
   8:	49 c0       	rjmp	.+146    	; 0x9c <__bad_interrupt>
   a:	00 00       	nop
   c:	47 c0       	rjmp	.+142    	; 0x9c <__bad_interrupt>
   e:	00 00       	nop
  10:	45 c0       	rjmp	.+138    	; 0x9c <__bad_interrupt>
  12:	00 00       	nop
  14:	43 c0       	rjmp	.+134    	; 0x9c <__bad_interrupt>
  16:	00 00       	nop
  18:	41 c0       	rjmp	.+130    	; 0x9c <__bad_interrupt>
  1a:	00 00       	nop
  1c:	3f c0       	rjmp	.+126    	; 0x9c <__bad_interrupt>
  1e:	00 00       	nop
  20:	3d c0       	rjmp	.+122    	; 0x9c <__bad_interrupt>
  22:	00 00       	nop
  24:	3b c0       	rjmp	.+118    	; 0x9c <__bad_interrupt>
  26:	00 00       	nop
  28:	39 c0       	rjmp	.+114    	; 0x9c <__bad_interrupt>
  2a:	00 00       	nop
  2c:	37 c0       	rjmp	.+110    	; 0x9c <__bad_interrupt>
  2e:	00 00       	nop
  30:	35 c0       	rjmp	.+106    	; 0x9c <__bad_interrupt>
  32:	00 00       	nop
  34:	33 c0       	rjmp	.+102    	; 0x9c <__bad_interrupt>
  36:	00 00       	nop
  38:	31 c0       	rjmp	.+98     	; 0x9c <__bad_interrupt>
  3a:	00 00       	nop
  3c:	2f c0       	rjmp	.+94     	; 0x9c <__bad_interrupt>
  3e:	00 00       	nop
  40:	2d c0       	rjmp	.+90     	; 0x9c <__bad_interrupt>
  42:	00 00       	nop
  44:	2b c0       	rjmp	.+86     	; 0x9c <__bad_interrupt>
  46:	00 00       	nop
  48:	29 c0       	rjmp	.+82     	; 0x9c <__bad_interrupt>
  4a:	00 00       	nop
  4c:	27 c0       	rjmp	.+78     	; 0x9c <__bad_interrupt>
  4e:	00 00       	nop
  50:	25 c0       	rjmp	.+74     	; 0x9c <__bad_interrupt>
  52:	00 00       	nop
  54:	23 c0       	rjmp	.+70     	; 0x9c <__bad_interrupt>
  56:	00 00       	nop
  58:	21 c0       	rjmp	.+66     	; 0x9c <__bad_interrupt>
  5a:	00 00       	nop
  5c:	1f c0       	rjmp	.+62     	; 0x9c <__bad_interrupt>
  5e:	00 00       	nop
  60:	1d c0       	rjmp	.+58     	; 0x9c <__bad_interrupt>
  62:	00 00       	nop
  64:	1b c0       	rjmp	.+54     	; 0x9c <__bad_interrupt>
  66:	00 00       	nop
  68:	19 c0       	rjmp	.+50     	; 0x9c <__bad_interrupt>
  6a:	00 00       	nop
  6c:	17 c0       	rjmp	.+46     	; 0x9c <__bad_interrupt>
  6e:	00 00       	nop
  70:	15 c0       	rjmp	.+42     	; 0x9c <__bad_interrupt>
  72:	00 00       	nop
  74:	13 c0       	rjmp	.+38     	; 0x9c <__bad_interrupt>
  76:	00 00       	nop
  78:	11 c0       	rjmp	.+34     	; 0x9c <__bad_interrupt>
  7a:	00 00       	nop
  7c:	0f c0       	rjmp	.+30     	; 0x9c <__bad_interrupt>
  7e:	00 00       	nop
  80:	0d c0       	rjmp	.+26     	; 0x9c <__bad_interrupt>
  82:	00 00       	nop
  84:	0b c0       	rjmp	.+22     	; 0x9c <__bad_interrupt>
  86:	00 00       	nop
  88:	09 c0       	rjmp	.+18     	; 0x9c <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61
  98:	30 d0       	rcall	.+96     	; 0xfa <main>
  9a:	52 c0       	rjmp	.+164    	; 0x140 <_exit>

0000009c <__bad_interrupt>:
  9c:	b1 cf       	rjmp	.-158    	; 0x0 <__vectors>

0000009e <PB_Lshift>:
}

void PB_Lshift(void) {
	char LED;
	LED = 0xfe; // 1111_1110
	for(int i = 0; i < 8; i++) {
  9e:	20 e0       	ldi	r18, 0x00	; 0
  a0:	30 e0       	ldi	r19, 0x00	; 0
	while(i--);
}

void PB_Lshift(void) {
	char LED;
	LED = 0xfe; // 1111_1110
  a2:	8e ef       	ldi	r24, 0xFE	; 254
	for(int i = 0; i < 8; i++) {
  a4:	10 c0       	rjmp	.+32     	; 0xc6 <PB_Lshift+0x28>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  a6:	4f ef       	ldi	r20, 0xFF	; 255
  a8:	5f e7       	ldi	r21, 0x7F	; 127
  aa:	96 e1       	ldi	r25, 0x16	; 22
  ac:	41 50       	subi	r20, 0x01	; 1
  ae:	50 40       	sbci	r21, 0x00	; 0
  b0:	90 40       	sbci	r25, 0x00	; 0
  b2:	e1 f7       	brne	.-8      	; 0xac <PB_Lshift+0xe>
  b4:	00 c0       	rjmp	.+0      	; 0xb6 <PB_Lshift+0x18>
  b6:	00 00       	nop
		_delay_ms(500);
		PORTB = LED;
  b8:	88 bb       	out	0x18, r24	; 24
		LED = (LED << 1) | 0x01; // 0000_0001
  ba:	90 e0       	ldi	r25, 0x00	; 0
  bc:	88 0f       	add	r24, r24
  be:	99 1f       	adc	r25, r25
  c0:	81 60       	ori	r24, 0x01	; 1
}

void PB_Lshift(void) {
	char LED;
	LED = 0xfe; // 1111_1110
	for(int i = 0; i < 8; i++) {
  c2:	2f 5f       	subi	r18, 0xFF	; 255
  c4:	3f 4f       	sbci	r19, 0xFF	; 255
  c6:	28 30       	cpi	r18, 0x08	; 8
  c8:	31 05       	cpc	r19, r1
  ca:	6c f3       	brlt	.-38     	; 0xa6 <PB_Lshift+0x8>
		_delay_ms(500);
		PORTB = LED;
		LED = (LED << 1) | 0x01; // 0000_0001
	}
}
  cc:	08 95       	ret

000000ce <PB_Rshift>:

void PB_Rshift(void) {
	char LED;
	LED = 0x7f; // 0111_1111
	for(int i = 0; i < 8; i++) {
  ce:	20 e0       	ldi	r18, 0x00	; 0
  d0:	30 e0       	ldi	r19, 0x00	; 0
	}
}

void PB_Rshift(void) {
	char LED;
	LED = 0x7f; // 0111_1111
  d2:	8f e7       	ldi	r24, 0x7F	; 127
	for(int i = 0; i < 8; i++) {
  d4:	0e c0       	rjmp	.+28     	; 0xf2 <PB_Rshift+0x24>
  d6:	4f ef       	ldi	r20, 0xFF	; 255
  d8:	5f e7       	ldi	r21, 0x7F	; 127
  da:	96 e1       	ldi	r25, 0x16	; 22
  dc:	41 50       	subi	r20, 0x01	; 1
  de:	50 40       	sbci	r21, 0x00	; 0
  e0:	90 40       	sbci	r25, 0x00	; 0
  e2:	e1 f7       	brne	.-8      	; 0xdc <PB_Rshift+0xe>
  e4:	00 c0       	rjmp	.+0      	; 0xe6 <PB_Rshift+0x18>
  e6:	00 00       	nop
		_delay_ms(500);
		PORTB = LED;
  e8:	88 bb       	out	0x18, r24	; 24
		LED = (LED >> 1) | 0x80; // 1000_0000
  ea:	86 95       	lsr	r24
  ec:	80 68       	ori	r24, 0x80	; 128
}

void PB_Rshift(void) {
	char LED;
	LED = 0x7f; // 0111_1111
	for(int i = 0; i < 8; i++) {
  ee:	2f 5f       	subi	r18, 0xFF	; 255
  f0:	3f 4f       	sbci	r19, 0xFF	; 255
  f2:	28 30       	cpi	r18, 0x08	; 8
  f4:	31 05       	cpc	r19, r1
  f6:	7c f3       	brlt	.-34     	; 0xd6 <PB_Rshift+0x8>
		_delay_ms(500);
		PORTB = LED;
		LED = (LED >> 1) | 0x80; // 1000_0000
	}
	
}
  f8:	08 95       	ret

000000fa <main>:

int main(void)
{
    DDRB = 0xff;
  fa:	8f ef       	ldi	r24, 0xFF	; 255
  fc:	87 bb       	out	0x17, r24	; 23
    while (1) 
    {
		PORTB = 0x00;
  fe:	18 ba       	out	0x18, r1	; 24
 100:	2f ef       	ldi	r18, 0xFF	; 255
 102:	8f e7       	ldi	r24, 0x7F	; 127
 104:	96 e1       	ldi	r25, 0x16	; 22
 106:	21 50       	subi	r18, 0x01	; 1
 108:	80 40       	sbci	r24, 0x00	; 0
 10a:	90 40       	sbci	r25, 0x00	; 0
 10c:	e1 f7       	brne	.-8      	; 0x106 <main+0xc>
 10e:	00 c0       	rjmp	.+0      	; 0x110 <main+0x16>
 110:	00 00       	nop
		// delay(0x100); clock 14.7456 Mhz 65535/14745600 sec So, fast
		_delay_ms(500);
		PORTB = 0xff;
 112:	8f ef       	ldi	r24, 0xFF	; 255
 114:	88 bb       	out	0x18, r24	; 24
 116:	2f ef       	ldi	r18, 0xFF	; 255
 118:	8f e7       	ldi	r24, 0x7F	; 127
 11a:	96 e1       	ldi	r25, 0x16	; 22
 11c:	21 50       	subi	r18, 0x01	; 1
 11e:	80 40       	sbci	r24, 0x00	; 0
 120:	90 40       	sbci	r25, 0x00	; 0
 122:	e1 f7       	brne	.-8      	; 0x11c <main+0x22>
 124:	00 c0       	rjmp	.+0      	; 0x126 <main+0x2c>
 126:	00 00       	nop
		// delay(0x100);
		_delay_ms(500);
		PB_Lshift();
 128:	ba df       	rcall	.-140    	; 0x9e <PB_Lshift>
 12a:	2f ef       	ldi	r18, 0xFF	; 255
 12c:	8f e7       	ldi	r24, 0x7F	; 127
 12e:	96 e1       	ldi	r25, 0x16	; 22
 130:	21 50       	subi	r18, 0x01	; 1
 132:	80 40       	sbci	r24, 0x00	; 0
 134:	90 40       	sbci	r25, 0x00	; 0
 136:	e1 f7       	brne	.-8      	; 0x130 <main+0x36>
 138:	00 c0       	rjmp	.+0      	; 0x13a <main+0x40>
		_delay_ms(500);
		PB_Rshift();
 13a:	00 00       	nop
 13c:	c8 df       	rcall	.-112    	; 0xce <PB_Rshift>
 13e:	df cf       	rjmp	.-66     	; 0xfe <main+0x4>

00000140 <_exit>:
 140:	f8 94       	cli

00000142 <__stop_program>:
 142:	ff cf       	rjmp	.-2      	; 0x142 <__stop_program>
